#! /usr/bin/env python
#
# Copyright (c) 2009 Okoye Chuka D. <okoye9@gmail.com>  
#                    All rights reserved.
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import os
import sys
sys.path.append("../")
import commands
import getopt
import halib.Env as env
import halib.Logger as logger
import halib.chaif.Chaif as chaif
import halib.chaif.RemoteServices as RemoteServices
import halib.chaif.DatabaseDriver as ddriver
import halib.hatci.Heartbeat as heartbeat
import halib.hatci.Rsync as datasync
import halib.hatci.Monit as monit
import halib.Exit as exit

def main():
   #We get options
   try:
      opts, args = getopt.getopt(sys.argv[1:], 'hm:',["mode="])
   except getopt.GetoptError,err:
      usage()
      sys.exit(2)

   mode = None
   
   for o, a in opts:
      if o == "-h":
         usage()
         sys.exit()
      elif o in ("-m", "--mode"):
         mode = a
   
   if (mode not in ("primary","secondary")):
      print "unrecognized option"
      usage()
      sys.exit(2)

   #We can now start the installation
   logger.initialize()

   #We try to run a system sanity check
   logger.section("HAOSCAR Installation Wizard Running")

   logger.section("System Sanity Checks")

   if(chaif.sanityCheck() !=  0):
      logger.subsection("sanity check failed, terminating installation")
      exit.open()
   logger.subsection("sanity check completed, proceeding to next step")

   #We set our environment variables in here
   logger.section("Environment Configuration")
   env.configureEnvironment()

   #Next, we generate system configuration facts to be stored in DB
   logger.section("Gathering System Config Info")
   sys_config = dict()
   sys_config = chaif.primaryConfigurator()

   #Time to setup our databases and populate it.
   logger.section("Database Initialization")
   chaif.databaseSetup()

   logger.subsection("populating database with primary config data")
   configdata = ["HOSTNAME", "NIC_INFO", "IP_ADDR"] #Primary/Sec Config Data
   temp = dict()
   database_driver = ddriver.DbDriver()
   for data in configdata:
      temp[data] = sys_config[data]
   print temp
   database_driver.insert_db('Primary_Configuration',temp)
   logger.subsection("sucessfully populated data for primary server")
 
   temp['DATA_DIR'] = sys_config['DATA_DIR']
   temp['DATA_SYNC'] = sys_config['DATA_SYNC']
   database_driver.insert_db('General_Configuration',temp)
   logger.subsection("sucessfully populated data for general configuration")

   logger.subsection("gathering secondary server configuration info")
   sys_config = chaif.secondaryConfigurator()
   database_driver.insert_db('Secondary_Configuration', sys_config)

   #We start with the HATCI
   logger.section("HATCI Setup")
   logger.section("Heartbeat Configuration")

   if(heartbeat.configure() != 0):
      logger.subsection("heartbeat config failed prematurely, terminating installation")
      exit.open("heartbeat configuration failed")
   	
   logger.section("Rsync Configuration")
   if(datasync.configure() != 0):
      logger.subsection("rsync config failed prematurely")
      exit.open("rsync failed")

   logger.section("Monit Configuration")
   if(monit.configure() != 0):
      logger.subsection("monit config failed prematurely")
      exit.open("monit failed")

def usage():
   print "usage: haoscar_configure -m <intended mode>"
   print "<intended mode: primary|secondary>"

if __name__ == "__main__":
   main()
